#version 460
#define FBM_OCTAVES 6

#extension GL_GOOGLE_include_directive : require
#include "noise.glsl"
#include "subd.glsl"

layout(local_size_x = 32) in;
layout(set = 0, binding = 0) readonly buffer OldKeys {
	uint counter;
	float _pad;
	uvec2 keys[];
} old;

layout(set = 0, binding = 1) buffer NewKeys {
	uint counter;
	uint _pad;
	uvec2 keys[];
} new;

// NOTE: investigate already computing clipping and culling stuff here.
// We might need more update iterations per frame then, otherwise
// we get popping artifacts
layout(set = 0, binding = 2, row_major) uniform Scene {
	mat4 _vp;
	vec3 pos;
	uint update;
	mat4 cullvp;
} scene;

// real scene:
layout(set = 0, binding = 3) buffer Vertices { vec4 vertices[]; };
layout(set = 0, binding = 4) buffer Indices { uint indices[]; };

layout(set = 0, binding = 5) buffer CulledKeys {
	uint counter;
	uint _pad;
	uvec2 keys[];
} culled;

// enough for our small dummy scene
// const vec3 vertices[] = {
// 	{-1, 0, -1}, // 4 outlining points ...
// 	{1, 0, -1},
// 	{1, 0, 1},
// 	{-1, 0, 1},
// };
// 
// const uint indices[] = {
// 	0, 1, 2,
// 	0, 2, 3
// };
// 

vec3 mapPos(uint ini, vec2 bary) {
	vec3 v_in[3] = vec3[3](
		vertices[indices[3 * ini + 0]].xyz,
		vertices[indices[3 * ini + 1]].xyz,
		vertices[indices[3 * ini + 2]].xyz
	);
 
	return berp(v_in, bary);
}

float desiredLOD(uint key, uint ini, out vec3 v_out[3]) {
	vec3 v_in[3] = vec3[3](
		vertices[indices[3 * ini + 0]].xyz,
		vertices[indices[3 * ini + 1]].xyz,
		vertices[indices[3 * ini + 2]].xyz
	);

	vec3 tri[3];
	subd(key, v_in, tri);
	float d0;
	vec3 d1;
	vec3 hyp = 0.5 * (displace(tri[1], d1, d0) + displace(tri[2], d1, d0));
	v_out = tri;
	return distanceToLOD(distance(scene.pos, hyp));
}

// struct Plane {
// 	vec3 pos;
// 	vec3 normal;
// };
// 
// bool inside(Plane plane, vec3 pos) {
// 	return dot((pos - plane.pos), plane.normal) > 0;
// }
// 
// struct Frustum {
// 	Plane near, far, left, right, top, bottom;
// };
// 
// bool inFrustum(Frustum frust, vec3 pos) {
// 	return inside(frust.near, pos) &&
// 		inside(frust.far, pos) && 
// 		inside(frust.left, pos) &&
// 		inside(frust.right, pos) &&
// 		inside(frust.top, pos) &&
// 		inside(frust.right, pos);
// }
// 
// Frustum frustum() {
// 		
// }

uint insideFrustum(vec3 p) {
	vec3 d1;
	float d2;

	vec4 t4 = scene.cullvp * vec4(displace(p, d1, d2), 1.0);
	vec3 t = t4.xyz / t4.w;
	if(t4.w < 0) {
		return 63;
	}

	t.y = -t.y;

	uint code = 0;
	if(t.x > 1) code |= 1;
	if(t.x < -1) code |= 2;
	if(t.y > 1) code |= 4;
	if(t.y < -1) code |= 8;
	if(t.z > 1) code |= 16;
	if(t.z < 0) code |= 32;

	return code;
}

void main() {
	uint id = gl_GlobalInvocationID.x;
	if(id >= old.counter) {
		return;
	}

	// assert(id < old.counter);
	uvec2 oldkey = old.keys[id];
	uint key = oldkey.x;
	uint ini = oldkey.y;

	vec3 v_out[3], dummy[3];
	uint klod = findMSB(key);
	uint plod = uint(desiredLOD(key == 1u ? key : key >> 1u, ini, v_out));
	uint dlod = uint(desiredLOD(key, ini, dummy));

	// vec2 ppos = 
	// uint plod = distanceToLOD(distance(scene.pos, ppos));

	// TODO: hack, not 100% sure why it's needed. Not mentioned in paper.
	// investigate. Probably indicates bug in consisten distance lod calc
	/*
	if((key & 1u) == 1u && (key != 1)) {
		uint sib = key;
		sib ^= 1u;
		uint sdlod = uint(desiredLOD(sib, ini));
		if(sdlod != dlod) {
			dlod = sdlod;
		}
	}
	*/

	// TODO: this is only for debugging/visualization
	// if we don't want to do the update step for performance reasons
	// we obviously shouldn't dispatch at all... but then also
	// not copy the dst buffer, i.e. requires to modify command buffer.
	// shame there is no such thing as indirect buffer copies
	/*
	if(scene.update == 0 || clod == dlod / * || clod - 1 == dlod* /) {
		new.keys[atomicAdd(new.counter, 1)] = uvec2(key, ini);
	} else if(clod < dlod) {
		// lod too low.
		// subdivide, i.e. add two children
		uint idx = atomicAdd(new.counter, 2);
		new.keys[idx + 0] = uvec2((key << 1u) | 0u, ini);
		new.keys[idx + 1] = uvec2((key << 1u) | 1u, ini);
	} else if(clod > dlod) {
		// lod too high, we don't need that much subdivision.
		// only one of the children will insert parent key
		if((key & 1u) == 1u) {
			key = key >> 1u; // get parent
			new.keys[atomicAdd(new.counter, 1u)] = uvec2(key, ini);
		}
	} else {
		// error
	}
	*/

	uint i1 = insideFrustum(v_out[0]);
	uint i2 = insideFrustum(v_out[1]);
	uint i3 = insideFrustum(v_out[2]);

	bool outside = (i1 & i2 & i3) != 0;
	if(scene.update == 0) {
		new.keys[atomicAdd(new.counter, 1)] = uvec2(key, ini);

		if(!outside) {
			culled.keys[atomicAdd(culled.counter, 1u)] = uvec2(key, ini);
		}
		return;
	}

	if(klod < dlod /* && !outside*/) {
		// subdivide
		uint idx = atomicAdd(new.counter, 2);
		new.keys[idx + 0] = uvec2((key << 1u) | 0u, ini);
		new.keys[idx + 1] = uvec2((key << 1u) | 1u, ini);

		if(!outside) {
			uint idx = atomicAdd(culled.counter, 2);
			culled.keys[idx + 0] = uvec2((key << 1u) | 0u, ini);
			culled.keys[idx + 1] = uvec2((key << 1u) | 1u, ini);
		}
	} else if(klod < (plod + 1)/* && !outside*/) {
		// just write
		new.keys[atomicAdd(new.counter, 1)] = uvec2(key, ini);

		if(!outside) {
			culled.keys[atomicAdd(culled.counter, 1u)] = uvec2(key, ini);
		}
	} else {  // merge
		if((key & 1u) == 1u) {
			key = (key == 1) ? key : key >> 1u; // get parent
			new.keys[atomicAdd(new.counter, 1u)] = uvec2(key, ini);

			if(!outside) {
				culled.keys[atomicAdd(culled.counter, 1u)] = uvec2(key, ini);
			}
		}
	}
}
