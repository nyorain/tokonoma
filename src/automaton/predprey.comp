#version 450

layout(binding = 0, rg32f) uniform writeonly image2D new;
layout(binding = 1, rg32f) uniform readonly image2D old;
layout(binding = 2) uniform UBO {
	float xbirth; // prey birth
	float xdeath; // prey death per pred
	float ybirth; // pred birth per prey
	float ydeath; // pred birth
	vec2 wander;
} ubo;

// TODO: don't normalize floats, no reason for it; remove 100 * x
void wander(ivec2 neighbor, vec2 o, inout vec2 v, ivec2 size) {
	// if(neighbor.x < 0 || neighbor.y < 0 || neighbor.x > size.x || neight.y > size.y) {
	if(neighbor != clamp(neighbor, ivec2(0, 0), ivec2(size - 1))) {
		return;
	}

	vec2 d = (100 * imageLoad(old, neighbor).xy) - o;
	v += ubo.wander * d;
}

void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(old);

	vec2 o = 100 * imageLoad(old, pos).xy;
	vec2 v = o;

	v.x += o.x * (ubo.xbirth - ubo.xdeath * o.y);
	v.y += o.y * (ubo.ybirth * o.x - ubo.ydeath);

	float offx = pos.y % 2;

	wander(pos + ivec2(1, 0), o, v, size);
	wander(pos + ivec2(-1, 0), o, v, size);

	wander(pos + ivec2(offx, -1), o, v, size);
	wander(pos + ivec2(offx - 1, -1), o, v, size);
	wander(pos + ivec2(offx, 1), o, v, size);
	wander(pos + ivec2(offx - 1, 1), o, v, size);

	v = clamp(v / 100, 0, 1);
	imageStore(new, pos, vec4(v, 0, 0));
}
