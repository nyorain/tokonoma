#version 460

#extension GL_GOOGLE_include_directive : require
#include "snoise.glsl"
#include "noise.glsl"
#include "terrain.glsl"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// layout(set = 0, binding = 0, rgba32f) uniform writeonly image2DArray outCol;
layout(set = 0, binding = 0, r32f) uniform writeonly image2DArray outCol;
layout(set = 0, binding = 1) uniform UBO {
	mat4 _vp;
	vec3 _pos;
	uint _update;
	uvec3 centerTile;
} ubo;

// Returns normalized value in range [0, 1]
vec4 mfbm(vec3 dir, uint lod) {
	vec4 sum = vec4(0.f);
	float lacunarity = 2.0;
	float gain = 0.6;

	float amp = 0.5f; // ampliture
	float mod = 1.f; // modulation
	float totalAmp = 0.f;
	// for(int i = 0; i < max(int(3 - 1.0 * lod), 2); ++i) {
	// for(int i = 0; i < max(8 - int(lod), 0); ++i) {
	for(int i = 0; i < 6; ++i) {
	// for(int i = 0; i < 14; ++i) {
		// vec3 grad;
		// float tmp = amp * snoise(mod * dir, grad);
		float tmp = amp * snoise(mod * dir);
		// grad = pow(0.6, max(i - 4, 0)) * amp * mod * grad;
		// grad = amp * mod * grad;
		// sum += vec4(tmp, i > 10 ? vec3(0.0) : grad);
		// sum += vec4(tmp, grad);
		sum += vec4(tmp);
		totalAmp += amp;

		mod *= lacunarity;
		amp *= gain;
	}

	// return sum / totalAmp;
	return sum;
}

float vfbm(vec3 pos) {
	float s = 0.0;

	float amp = 0.5f;
	float mod = 1.f;
	for(int i = 0; i < 3; ++i) {
		s += amp * voronoiNoise2(mod * pos);
		amp *= 0.5;
		mod *= 2.0;
	}

	return s;
}

void main() {
	const uvec2 pixel = gl_GlobalInvocationID.xy;
	const uint lod = gl_GlobalInvocationID.z;

	const uvec3 size = imageSize(outCol);
	if(pixel.x >= size.x || pixel.y >= size.y || lod >= size.z) {
		return;
	}

	const vec2 pixelSize = 1.f / size.xy;
	const vec2 uv = (pixel + vec2(0.5, 0.5)) * pixelSize;

	bool valid;
	vec3 pos = heightmapPos(ubo.centerTile, uv, lod, valid);
	vec4 h = vec4(0.0, 0, 0, 1.0); // TODO: which value for invalid section?

	if(valid) {
		float f = 32.0;
		h = mfbm(f * pos, lod);		

		h *= 0.4;
		h.x += 0.5;

		f *= 128;
		h.x += 0.01 * vfbm(f * pos);

		// h.yzw *= f;
	}

	// TODO: debugging
	// h.xyz = 0.5 + 0.5 * pos;
	// h.xyz = pos;

	imageStore(outCol, ivec3(pixel, lod), h);
}
