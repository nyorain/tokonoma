#version 450

layout(local_size_x_id = 0, local_size_y_id = 1) in;

layout(set = 0, binding = 0) uniform sampler2D inLight;
layout(set = 0, binding = 1) uniform sampler2D inEmission;
layout(set = 0, binding = 2, rgba16f) uniform image2D outColor;
layout(set = 0, binding = 3) uniform UBO {
	float bias;
	float scale;
	bool emission;
} ubo;

void main() {
	uvec2 pixel = gl_GlobalInvocationID.xy;
	uvec2 size = imageSize(outColor);
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	vec2 pixelSize = 1.f / size;
	vec2 uv = (pixel + vec2(0.5, 0.5)) * pixelSize;

	vec3 col = texture(inLight, uv).rgb;

	// #1: simple offset + scale
	// This approach has problems, completely messes up color hue in many
	// cases due to component-wise clamping to 0
	// vec3 light = max(ubo.scale * (col + ubo.bias), 0.0);
	
	// #2: don't do it component-wise
	vec3 light = vec3(0.0);

	// variations
	// float l = length(col); // euclid/2- norm
	// float l = dot(col, vec3(1, 1, 1)); // manhattan/1- norm, color vals >= 0
	// float l = max(col.r, max(col.g, col.b)); // max/infinity norm
	float l = dot(col, vec3(0.25, 0.65, 0.1)); // luminance

	if(l >= -ubo.bias) {
		// light = (col / l) * (l + ubo.bias);

		// TODO: document/continue ideas here
		// We could also make
		// light = (col / l) * pow(l + ubo.bias, 2); // smooth transition
		light = (col / l) * pow(l + ubo.bias, 0.7); // soften highlights
		// light = (col / l) * log(2 * pow(l + ubo.bias, 2) + 1); // both?
	}

	light *= ubo.scale;

	if(ubo.emission) {
		// TODO: we probably shouldn't add this *after* the bias & scaling,
		// but before? investigate
		light += texture(inEmission, uv).rgb;
	}

	// store
	imageStore(outColor, ivec2(pixel), vec4(light, 1.0));
}
