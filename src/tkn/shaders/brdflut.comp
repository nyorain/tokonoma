#version 450

#extension GL_GOOGLE_include_directive : enable
#include "pbr.glsl"

layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(constant_id = 2) const uint sampleCount = 1024;

// NOTE: we obviously only need rg8 but that is an extended
// shader storage format. This program should only be run once and
// the result then be loaded from a file anyways.
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D outLut;

// modified
float schlickGGX(float NdotV, float roughness) {
    float a = roughness;
    float k = (a * a) / 2.0;
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    return nom / denom;
}

float smith(float ndv, float ndl, float roughness) {
    float ggx2 = schlickGGX(ndv, roughness);
    float ggx1 = schlickGGX(ndl, roughness);

    return ggx1 * ggx2;
}  

vec2 integrateBRDF(float ndv, float roughness) {
    vec3 V;
    V.x = sqrt(1.0 - ndv * ndv);
    V.y = 0.0;
    V.z = ndv;

    float accumScale = 0.0;
    float accumBias = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);
    for(uint i = 0u; i < sampleCount; ++i) {
        vec2 xi = hammersley(i, sampleCount);
        vec3 H = importanceSampleGGX(xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float ndl = max(L.z, 0.0);
        float ndh = max(H.z, 0.0);
        float vdh = max(dot(V, H), 0.0);

        if(ndl > 0.0) {
            float g = smith(ndv, ndl, roughness);
            float gvis = (g * vdh) / (ndh * ndv);
            float fc = pow(1.0 - vdh, 5.0);

            accumScale += (1.0 - fc) * gvis;
            accumBias += fc * gvis;
        }
    }
    accumScale /= sampleCount;
    accumBias /= sampleCount;

    return vec2(accumScale, accumBias);
}

void main() {
	uvec2 pixel = gl_GlobalInvocationID.xy;
	uvec2 size = imageSize(outLut);
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	vec2 pixelSize = 1.f / size;
	vec2 uv = (pixel + vec2(0.5, 0.5)) * pixelSize;

	vec2 res = integrateBRDF(uv.x, uv.y);
	imageStore(outLut, ivec2(pixel), vec4(res, 0.0, 1.0));
}

