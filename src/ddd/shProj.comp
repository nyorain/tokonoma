// spherical harmonics computations
// gets a cubemap as input and computes the sphercial harmonic coefficients
// writes them into the given storage buffer
// TODO: only works for 32x32 input cubemaps. we curently rely on
//   shared memory and do the whole computation in one work group,
//   otherwise we would have to use some kind of multi-pass-reduction
//   or use atomic addition (ugly since we need float here)

// nope to all 32x32 stuff, temporary rewored for 128x128

#version 460

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 0, binding = 0) uniform sampler2D cubeface; // size 32x32
layout(set = 0, binding = 1, rgba16f) uniform image1DArray outCoeffs;
layout(set = 0, binding = 2) uniform UBO {
	vec3 pos; // position of this light probe
	uint coord;
} ubo;

layout(push_constant) uniform PC {
	uint face;
} pc;

const uint size = gl_WorkGroupSize.x; // == gl_WorkGroupSize.y
shared vec3 coeffs[size][size][9];

vec3 cubeCoords(uint face, vec2 uv) {
	switch(face) {
		case 0: return vec3(1.f, uv.y, -uv.x);
		case 1: return vec3(-1.f, uv.y, uv.x);
		case 2: return vec3(uv.x, -1.f, uv.y);
		case 3: return vec3(uv.x, 1.f, -uv.y);
		case 4: return vec3(uv.x, uv.y, 1.f);
		case 5: return vec3(-uv.x, uv.y, -1.f);
	}
}

uvec2 l = gl_LocalInvocationID.xy;
vec2 pixelSize = 1.f / textureSize(cubeface, 0);
float pixelArea = pixelSize.x * pixelSize.y;

void add(vec2 pixel) {
	vec2 uv = pixel * pixelSize;
	vec2 suv = 2 * uv - 1;
	float fac = 4 * pixelArea / (1 + suv.x * suv.x + suv.y * suv.y);
	fac *= 6; // TODO: not sure if correct

	vec3 color = fac * 4 * texture(cubeface, uv).rgb; // times 4 due to linear filter
	vec3 c = normalize(cubeCoords(pc.face, suv));
	coeffs[l.x][l.y][0] += color;
	coeffs[l.x][l.y][1] += color * c.y;
	coeffs[l.x][l.y][2] += color * c.z;
	coeffs[l.x][l.y][3] += color * c.x;
	coeffs[l.x][l.y][4] += color * c.x * c.y;
	coeffs[l.x][l.y][5] += color * c.y * c.z;
	coeffs[l.x][l.y][6] += color * (3.f * c.z * c.z - 1.f);
	coeffs[l.x][l.y][7] += color * c.x * c.z;
	coeffs[l.x][l.y][8] += color * (c.x * c.x - c.y * c.y);
}

// we use linear sampling even if it's not 100% correct. It's close enough
// and improves performance here quite a bit
void main() {
	vec2 pixel = 8 * gl_GlobalInvocationID.xy; // top-left of sampled pixels
	pixel += 1; // for linear sampling

	// initialize coeffs to 0
	for(uint j = 0u; j < 9; ++j) {
		coeffs[l.x][l.y][j] = vec3(0.0);
	}

	// accumulate coeffs
	for(int x = 0; x < 4; ++x) {
		for(int y = 0; y < 4; ++y) {
			add(pixel + 2 * vec2(x, y));
		}
	}

	// normalize coeffs
	// factor the same for all sampled pixels (approx)
	// TODO: re-check normalization, might be off
	coeffs[l.x][l.y][0] *= 0.282095f;
	coeffs[l.x][l.y][1] *= 0.488603f;
	coeffs[l.x][l.y][2] *= 0.488603f;
	coeffs[l.x][l.y][3] *= 0.488603f;
	coeffs[l.x][l.y][4] *= 1.092548f;
	coeffs[l.x][l.y][5] *= 1.092548f;
	coeffs[l.x][l.y][6] *= 0.315392f;
	coeffs[l.x][l.y][7] *= 1.092548f;
	coeffs[l.x][l.y][8] *= 0.546274f;

	// reduce
	for(uint isize = size / 2; isize > 0; isize /= 2) {
		barrier();

		// sum up squares
		if(l.x < isize && l.y < isize) {
			for(uint i = 0u; i < 9; ++i) {
				coeffs[l.x][l.y][i] += coeffs[isize + l.x][l.y][i];
				coeffs[l.x][l.y][i] += coeffs[l.x][isize + l.y][i];
				coeffs[l.x][l.y][i] += coeffs[isize + l.x][isize + l.y][i];
			}
		}
	}

	// write back
	if(l.x == 0 && l.y == 0) {
		for(uint i = 0u; i < 9; ++i) {
			float w = i < 3 ? ubo.pos[i] : 0.0;
			vec3 prev = imageLoad(outCoeffs, ivec2(ubo.coord, i)).rgb;
			imageStore(outCoeffs, ivec2(ubo.coord, i),
				vec4(prev + coeffs[0][0][i], w));
		}
	}
}
