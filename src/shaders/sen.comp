#version 450

#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

#include "ray.glsl"
#include "util.glsl"
#include "noise.glsl"

layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 0) uniform UBO {
	vec4 pos;
	vec4 dir;
	float fov; // on y coord
	float aspect; // aspect ratio: x / y
	vec2 res; // resolution
	vec2 faceSize; // size (in pixels) of one face
	float time;
} ubo;

layout(row_major, set = 0, binding = 1) readonly buffer Objects {
	Box boxes[];
};

layout(set = 0, binding = 2, r32ui) uniform uimage2D lightTex;

// settings
const uint maxBounces = 3;
const vec3 up = vec3(0, 1, 0);
const float infinity = 1.f / 0.f;
const float pi = 3.1415926535897932;

const vec3 lightPos = vec3(0, 1.8, 0);
const float lightRadius = 0.2;

// Returns whether the given ray hits anything (except the object
// to ignore) below the given t parameter.
bool anyhit(Ray ray, float belowt, uint ignore);

vec3 shade(vec3 pos, vec3 normal, vec3 view, uint ignore) {
	float diffFac = 0.4;
	float specFac = 0.4;
	float shininess = 32;

	vec3 col = vec3(0.0); // no ambient

	vec3 l = lightPos - pos;
	vec3 x,y;
	basis(l, x, y);
	vec2 r = lightRadius * (2 * random2(pos.xy + pos.yz) - 1);

	Ray tolight = Ray(pos, l + r.x * x + r.y * y);
	l = normalize(l);
	if(dot(l, normal) > 0 && !anyhit(tolight, 1.f, ignore)) {
		col += diffFac * clamp(dot(normal, l), 0, 1); // diffuse
		vec3 h = normalize(-view + l);
		col += specFac * vec3(clamp(pow(dot(h, normal), shininess), 0, 1));
	}

	return clamp(col, 0.0, 1.0);
}

bool anyhit(Ray ray, float belowt, uint ignore) {
	for(uint i = 0; i < boxes.length(); ++i) {
		if(i == ignore) {
			continue;
		}

		vec3 bnormal;
		float t = intersect(ray, boxes[i], bnormal);
		if(t > 0.0 && t < belowt) {
			return true;
		}
	}

	return false;
}

// next intersection t on ray.
// also gives normal and position of intersected object
// returns -1.0 if there is no intersection
float next(Ray ray, out vec3 pos, out vec3 normal,
		out vec3 uv, out uint id, uint ignore) {
	float mint = infinity;
	bool found = false;
	for(uint i = 0; i < boxes.length(); ++i) {
		if(i == ignore) { // TODO: no self bounce atm
			continue;
		}

		vec3 bnormal;
		vec3 buv;
		float t = intersect(ray, boxes[i], bnormal, buv);
		if(t > 0.0 && t < mint) {
			mint = t;
			pos = ray.origin + t * ray.dir;
			normal = bnormal;
			uv = buv;
			id = i;
		}
	}

	if(mint == infinity) {
		return -1.0;
	}

	return mint;
}

vec3 trace(Ray ray) {
	vec3 col = vec3(0, 0, 0); // default, background

	vec3 normal;
	vec3 pos;
	vec4 color;
	vec3 uv;
	uint id;
	uint ignore = 99999;

	uint ids[maxBounces];
	vec3 uvs[maxBounces];
	vec3 colors[maxBounces];
	float facs[maxBounces];

	// forward till end
	int b;
	for(b = 0; b < maxBounces; ++b) {
		if(next(ray, pos, normal, uv, id, ignore) < 0.0) {
			break;
		}

		ids[b] = id;
		uvs[b] = uv;
		colors[b] = shade(pos, normal, ray.dir, id);

		// random ray generation
		vec3 x, y;
		basis(normal, x, y);

		// == purely random, easiest ==
		vec3 r = random3(pos + ubo.time);
		r.yz = 2 * r.yz - 1;

		// == i raise you: psychedelic path tracer ==
		// vec3 r;
		// r.x = gradientNoise(pos.zy + ubo.time);
		// r.y = sgradientNoise(pos.xz + ubo.time);
		// r.z = sgradientNoise(pos.xy + ubo.time);

		// == combined? ==
		// vec3 r = random3(pos + 0.1 * ubo.time * ray.dir + colors[b]);
		// r.x = gradientNoise(5 * pos.zy + ubo.time + 10 * r.zy);
		// r.y = sgradientNoise(5 * pos.xz + ubo.time + 10 * r.xz);
		// r.z = sgradientNoise(5 * pos.xy + ubo.time + 10 * r.xy);

		// == other random? ==
		// also include colors[b] in the noise?
		// XXX: not sure why, but this produces better results
		// less weirdness on edges somehow
		// vec3 r = random3(pos);
		// r.x = gradientNoise(16.31 * ubo.time + 123 * r.zy);
		// r.y = sgradientNoise(19.4 * ubo.time - 23.34 * r.xz);
		// r.z = sgradientNoise(-12.2 * ubo.time - 43.2 * r.xy);

		// == i raise you: psychedelic path tracer v.2 ==
		// vec3 r = random3(id + floor(vec3(uv)));
		// r.x = gradientNoise(5 * ubo.time + 10 * r.zy);
		// r.y = sgradientNoise(5 * ubo.time + 10 * r.xz);
		// r.z = sgradientNoise(-5 * ubo.time - 10 * r.xy);

		// == use iuv stuff ==
		// vec2 suvxy;
		// int face = cubeFace(uv, suvxy);
		// vec2 uv = (0.5 + 0.5 * suvxy) * faceSize;
		// uv.x += face * faceSize.x;
		// uv.y += id * faceSize.y;
		// ivec2 iuv = ivec2(uv);
		// vec3 r = random3(ivec3(uv, id));
		// r.x = gradientNoise(1.1 * ubo.time + 11.92 * r.zy);
		// r.y = sgradientNoise(0.9 * ubo.time + 9.4 * r.xz);
		// r.z = sgradientNoise(-1.3 * ubo.time - 10 * r.xy);


		// r.x = max(r.x, 0.01);
		vec3 dir = vec3(0.0);
		dir += normalize(r.x * normal + r.y * x + r.z * y);

		if(id == 6) { // half reflective
			dir += 10 * reflect(ray.dir, normal);
			dir = normalize(dir);
		}

		float f = dot(dir, normal);
		facs[b] = f;
		ray = Ray(pos, dir);
		ignore = id;
	}

	// shade
	int maxB = b - 1;
	for(--b; b >= 0; --b) {
		col *= facs[b];
		col += colors[b];

		uint id = ids[b];
		vec2 suvxy;
		int face = cubeFace(uvs[b], suvxy);
		vec2 uv = (0.5 + 0.5 * suvxy) * ubo.faceSize;
		uv.x += face * ubo.faceSize.x;
		uv.y += id * ubo.faceSize.y;
		ivec2 iuv = ivec2(uv);

		// TODO: better way to atomic load?
		// vec4 light = unpackUnorm4x8(imageLoad(lightTex, iuv).r);
		vec4 light = unpackUnorm4x8(imageAtomicCompSwap(lightTex, iuv, 0, 0));
		// float fac = 0.05;
		float fac = (0.05 / maxBounces) * (maxBounces - b - 1); // more bounces -> more weight

		if(id == 6 && b == 0) { // half reflective
			fac *= 5.0;
		} else if(id == 6 && b != 0) {
			// in this case, don't store anything. we have to follow
			// manually
			continue;
		}

		// fac = max(fac, 0.02);
		light = clamp(mix(light, vec4(col, 1.0), fac), 0, 1);

		// TODO
		imageAtomicExchange(lightTex, iuv, packUnorm4x8(light));
		// imageStore(lightTex, iuv, uvec4(packUnorm4x8(light)));

		// XXX: subgroup thing: really bad for performance,
		// has no visible advantage (it might have theoretically
		// when many instances of the same subgroup write
		// the same texel; values get lost in that case)
		// TODO: instead, we could also try out strict ordering
		// with atomic compswap instructions. Maybe only minor
		// performance hit for that?
		/*
		vec3 icol = col;
		uint last = 0xFFFFFFFFu;
		uint count = 1u;
		for(uint i = 0; i < gl_SubgroupSize; ++i) {
			if(i == gl_SubgroupInvocationID) {
				if(last != 0xFFFFFFFFu) {
					icol += subgroupShuffle(icol, last);
				}

				last = i;
				continue;
			}

			ivec2 v = subgroupShuffle(iuv, i);
			if(v == iuv) {
				++count;
				last = i;
			}
		}

		// atomic still needed since other workgroups might
		// write the same texel
		if(last == gl_SubgroupInvocationID) {
			// imageStore(lightTex, iuv, light);
			float omfac = 1 - fac;
			icol = clamp(mix(icol / count, vec3(light), pow(omfac, count)), 0, 1);
			imageAtomicExchange(lightTex, iuv, packUnorm4x8(vec4(icol, 1.0)));
		}
		*/

		// TODO: technically, we could ignore color on b == 0
		// if(id == 5) {
		// 	// TODO: ignore color here?
		// 	col = light.rgb;
		// } else {
		vec3 color = boxes[id].color.rgb;
		col = color * light.rgb;
		// }
	}

	return col;
}

void main() {
	// always just follow one ray
	// but store it in every texture on the way
	// problem: with what weight?
	vec2 invid = gl_GlobalInvocationID.xy;
	vec2 total = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;
	vec2 pstep = 1 / total;
	vec2 base = invid / total;

	// generate psuedo-random ray into scene
	vec3 az = normalize(ubo.dir.xyz);
	vec3 ax = normalize(cross(az, up));
	vec3 ay = cross(ax, az);

	// vec2 uv = 2 * random2(ubo.time + invid) - 1;
	vec2 uv = 2 * (base + pstep * (random2(ubo.time + invid) - 0.5)) - 1;
	// vec2 uv = 2 * base - 1;
	// vec2 uv = vec2(0.0);
	float maxy = tan(ubo.fov / 2);
	uv *= vec2(maxy * ubo.aspect, maxy);

	vec3 ro = ubo.pos.xyz;
	vec3 rd = normalize(az + uv.x * ax + uv.y * ay);
	trace(Ray(ro, rd));
}
