#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, r32f) uniform writeonly image2D out_field;
layout(binding = 1, r32f) uniform readonly image2D in_field;

layout(binding = 4) uniform UBO {
	vec2 _mp0;
	vec2 _mp1;
	float dt;
} ubo;

float diff = 1.f;

// we just use the unstable method. Produces better results
// and for diff <= 1 and dt reasonably small it's stable enough.
// Probably won't work when framrate drops to under 10 or sth.

// NOTE OLD:
// the idea is the same as for the pressure iterations:
// jacobi iterations to solve poisson equation.
// We could probably combine it into one compute shader program

void main() {
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	float l = imageLoad(in_field, pos + ivec2(-1, 0)).x;
	float r = imageLoad(in_field, pos + ivec2(1, 0)).x;
	float t = imageLoad(in_field, pos + ivec2(0, 1)).x;
	float b = imageLoad(in_field, pos + ivec2(0, -1)).x;
	float c = imageLoad(in_field, pos).x;

	uvec2 size = (gl_NumWorkGroups * gl_WorkGroupSize).xy;
	// float p = (l + r + t + b + diff * c) / (4 + diff);
	float p = c + ubo.dt * diff * (((l + r + t + b) / 4) - c);

	imageStore(out_field, pos, vec4(p));
}

