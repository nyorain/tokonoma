#version 460
#extension GL_GOOGLE_include_directive : require

#include "noise.glsl"
#include "bicubic.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D rendered;
layout(set = 0, binding = 1, rgba16f) uniform image2D history;
layout(set = 0, binding = 2) uniform sampler2D maskTex;

vec3 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec3 p, vec3 q) {
	vec3 r = q - p;
	vec3 rmax = aabb_max - p.xyz;
	vec3 rmin = aabb_min - p.xyz;

	const float eps = 0.00000001f;

	if (r.x > rmax.x + eps)
		r *= (rmax.x / r.x);
	if (r.y > rmax.y + eps)
		r *= (rmax.y / r.y);
	if (r.z > rmax.z + eps)
		r *= (rmax.z / r.z);

	if (r.x < rmin.x - eps)
		r *= (rmin.x / r.x);
	if (r.y < rmin.y - eps)
		r *= (rmin.y / r.y);
	if (r.z < rmin.z - eps)
		r *= (rmin.z / r.z);

	return p + r;
}

const float exposure = 1.f;
vec3 tonemap(vec3 c) {
	return 1.f - exp(-exposure * c);
}

vec3 untonemap(vec3 c) {
	return -log(-c + 1.f) / exposure;
}

vec3 loadHistory(ivec2 id, ivec2 offset, inout float fac) {
	vec2 scaleFac = 1.f / imageSize(history);
	vec2 coords = (id + offset + 0.5) * scaleFac;
	vec2 m = texture(maskTex, coords).rg;
	if(dot(m, offset) < 0.0) {
		return vec3(0.0);
	}


	fac += 1.0;
	return imageLoad(history, id + offset).rgb;
}

vec3 upscale(ivec2 id) {
#define BILAT_UPSAMPLE
#ifdef BILAT_UPSAMPLE
	vec2 scaleFac = vec2(textureSize(rendered, 0)) / imageSize(history);
	vec2 did = (id + 0.5) * scaleFac;
	vec2 f = fract(did - 0.5);
	ivec2 bid = ivec2(floor(did - 0.5));

	vec3 s00 = texelFetch(rendered, bid + ivec2(0, 0), 0).rgb;
	vec3 s01 = texelFetch(rendered, bid + ivec2(0, 1), 0).rgb;
	vec3 s10 = texelFetch(rendered, bid + ivec2(1, 0), 0).rgb;
	vec3 s11 = texelFetch(rendered, bid + ivec2(1, 1), 0).rgb;

	vec2 m00 = texelFetch(maskTex, bid + ivec2(0, 0), 0).rg;
	vec2 m01 = texelFetch(maskTex, bid + ivec2(0, 1), 0).rg;
	vec2 m10 = texelFetch(maskTex, bid + ivec2(1, 0), 0).rg;
	vec2 m11 = texelFetch(maskTex, bid + ivec2(1, 1), 0).rg;

	float f00 = dot(m00, ivec2(-1, -1));
	float f01 = dot(m01, ivec2(-1, 1));
	float f10 = dot(m10, ivec2(1, -1));
	float f11 = dot(m11, ivec2(1, 1));

	float b00 = (1 - f.x) * (1 - f.y);
	float b01 = (1 - f.x) * (f.y);
	float b10 = (f.x) * (1 - f.y);
	float b11 = f.x * f.y;

	float w00 = step(0, f00) * b00;
	float w01 = step(0, f01) * b01;
	float w10 = step(0, f10) * b10;
	float w11 = step(0, f11) * b11;

	float sum = w00 + w01 + w10 + w11;
	if(sum == 0.0) {
		// TODO
		return vec3(1, 0, 1);
	}

	if(sum > 0.99) {
		// return texture(rendered, vec2(id + 0.5) / imageSize(history)).rgb;
	}

	vec3 res = vec3(0.0);
	res += w00 * s00;
	res += w01 * s01;
	res += w10 * s10;
	res += w11 * s11;
	
	res /= sum;
	return res;
#else 
	// return texture(rendered, vec2(id + 0.5) / imageSize(history)).rgb;
	return textureBicubic(rendered, vec2(id + 0.5) / imageSize(history)).rgb;
	// return textureBicubicCatmull(rendered, vec2(id + 0.5) / imageSize(history)).rgb;
#endif 
}

void main() {
	uvec2 size = imageSize(history);
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	if(id.x >= size.x || id.y > size.y) {
		return;
	}

	float fac = 0.8f;
	vec3 h = imageLoad(history, id).rgb;

	float accum = 0.0;
	h += fac * loadHistory(id, ivec2(1, 0), accum).rgb;
	h += fac * loadHistory(id, ivec2(0, 1), accum).rgb;
	h += fac * loadHistory(id, ivec2(0, -1), accum).rgb;
	h += fac * loadHistory(id, ivec2(-1, 0), accum).rgb;

	h += fac * loadHistory(id, ivec2(-1, 1), accum).rgb;
	h += fac * loadHistory(id, ivec2(1, 1), accum).rgb;
	h += fac * loadHistory(id, ivec2(1, -1), accum).rgb;
	h += fac * loadHistory(id, ivec2(-1, -1), accum).rgb;

	h /= (1 + accum * fac);

	// h += fac * imageLoad(history, id + ivec2(1, 0)).rgb;
	// h += fac * imageLoad(history, id + ivec2(0, 1)).rgb;
	// h += fac * imageLoad(history, id + ivec2(0, -1)).rgb;
	// h += fac * imageLoad(history, id + ivec2(-1, 0)).rgb;
	// h += fac * imageLoad(history, id + ivec2(-1, 1)).rgb;
	// h += fac * imageLoad(history, id + ivec2(-1, -1)).rgb;
	// h += fac * imageLoad(history, id + ivec2(1, -1)).rgb;
	// h += fac * imageLoad(history, id + ivec2(1, 1)).rgb;
	// h /= (1 + 8 * fac);

	vec2 uv = (id + 0.5) / size;
	vec3 r = upscale(id);
	vec3 cmin = r;
	vec3 cmax = r;
	vec3 cavg = r;


	// TODO: noisy blur upscale? or use edge-information somehow?
	// I guess we could render 1-bit edge-buffer, where we just render
	// all segments as lines.
	// vec3 rb = r;
	// vec3 rb = tonemap(colBlurredUh(uv));
	// vec3 rb = colBlurred(uv);
	vec3 rb = tonemap(r);
	// h.rgb = tonemap(h.rgb);

	const vec3 luminanceFac = vec3(0.25, 0.65, 0.1);
	float lum0 = dot(luminanceFac, rb);
	float lum1 = dot(luminanceFac, h);
	float ndiff = abs(lum0 - lum1) / (max(lum0, max(lum1, 0.0001)));
	// diff = pow(diff, 2.0);
	float f = 0.99;
	// f -= diff * gradientNoise(0.05 * (h.rg + h.b));
	// f -= 0.2 * pow(random(0.1 + h.rg + h.b), 2);
	
	float n = gradientNoise(1000 * uv + 10 * (h.rg + h.b));
	// float n = gradientNoise(1000 * uv);
	f -= 0.2 * pow(ndiff, 2) * n;
	f = max(f, 0);

	// float f = 0.9999;
	// f = 0.0;

	vec3 res = mix(rb, h, f);
	imageStore(history, id, vec4(res, 1));
}
