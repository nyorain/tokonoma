#pragma once

#include <nytl/span.hpp>
#include <tkn/types.hpp>
using namespace tkn::types;

struct Sky {
	/*
	static constexpr Vec4f sunColors[] = {
		{0.4, 		0.447059,	 0.8,		0.002981},
		{0.384314, 	0.556863,	 0.603922,	0.134128},
		{0.447059, 	0.592157,	 0.654902,	0.171386},
		{0.921569, 	0.54902,	 0.137255,	0.265276},
		{0.992157, 	0.901961,	 0.784314,	0.314456},
		{0.921569, 	0.882353,	 0.839216,	0.499255},
		{0.984314, 	0.819608,	 0.603922,	0.658717},
		{0.984314, 	0.576471,	 0.439216,	0.710879},
		{0.909804, 	0.392157,	 0.219608,	0.751118},
		{0.454902, 	0.34902,	 0.27451,	0.804768},
		{0.219608, 	0.294118,	 0.494118,	0.892698},
	};

	static constexpr Vec4f ambientColors[] = {
		{0.329412,	0.521569,	0.721569,	0.00149},
		{0.286275,	0.419608,	0.501961,	0.141579},
		{0.376471,	0.537255,	0.658824,	0.202683},
		{0.737255,	0.658824,	0.721569,	0.304024},
		{0.537255,	0.584314,	0.658824,	0.445604},
		{0.721569,	0.776471,	0.839216,	0.576751},
		{0.694118,	0.701961,	0.737255,	0.658718},
		{0.603922,	0.603922,	0.603922,	0.76304},
		{0.576471,	0.529412,	0.666667,	0.81073},
		{0.309804,	0.509804,	0.74902,	0.886736},
		{0.329412,	0.521569,	0.721569,	0.998509},
	};
	*/

	/*
	static constexpr Vec4f sunColors[] = {
		{0.149020, 0.337255, 0.796079, 0.0},
		{0.384314, 0.556863, 0.603922, 0.12220},
		{0.447059, 0.592157, 0.654902, 0.18777},
		{0.937255, 0.686275, 0.349020, 0.24888},
		{0.992157, 0.901961, 0.784314, 0.32488},
		{0.921569, 0.882353, 0.839216, 0.50670},
		{0.984314, 0.819608, 0.603922, 0.66020},
		{0.984314, 0.576471, 0.439216, 0.71236},
		{0.858824, 0.509804, 0.392157, 0.76304},
		{0.454902, 0.349020, 0.274510, 0.80476},
		{0.219608, 0.294118, 0.494118, 0.89269},
		{0.313726, 0.392157, 0.600000, 0.93442},
	};

	static constexpr Vec4f ambientColors[] = {
		{0.392157, 0.627451, 0.803922, 0.0},
		{0.286275, 0.419608, 0.501961, 0.14008},
		{0.376471, 0.537255, 0.658824, 0.20268},
		{0.686275, 0.658824, 0.564706, 0.26378},
		{0.737255, 0.658824, 0.721569, 0.30402},
		{0.537255, 0.584314, 0.658824, 0.44560},
		{0.721569, 0.776471, 0.839216, 0.57675},
		{0.694118, 0.701961, 0.737255, 0.65871},
		{0.603922, 0.603922, 0.603922, 0.7630},
		{0.576471, 0.529412, 0.666667, 0.8107},
		{0.309804, 0.509804, 0.749020, 0.88971},
		{0.392157, 0.627451, 0.803922, 1.0},
	};
	*/

	static constexpr Vec4f sunColors[] = {
		{0.149020, 0.337255, 0.796079, 0.0},
		{0.384314, 0.556863, 0.603922, 0.12220},
		{0.447059, 0.592157, 0.654902, 0.18777},
		{0.937255, 0.686275, 0.349020, 0.24888},
		{0.992157, 0.901961, 0.784314, 0.32488},
		{0.921569, 0.882353, 0.839216, 0.50670},
		{0.984314, 0.819608, 0.603922, 0.66020},
		{0.984314, 0.576471, 0.439216, 0.71236},
		{0.858824, 0.509804, 0.392157, 0.76304},
		{0.454902, 0.349020, 0.274510, 0.80476},
		{0.219608, 0.294118, 0.494118, 0.89269},
		{0.313726, 0.392157, 0.600000, 0.93442},
	};

	static constexpr Vec4f ambientColors[] = {
		{0.032157, 0.027451, 0.083922, 0.0},
		{0.286275, 0.359608, 0.501961, 0.14008},
		{0.376471, 0.437255, 0.608824, 0.20268},
		{0.556275, 0.558824, 0.664706, 0.26378},
		{0.687255, 0.658824, 0.991569, 0.30402},
		{0.537255, 0.584314, 1.488824, 0.44560},
		{0.621569, 0.676471, 1.759216, 0.57675},
		{0.594118, 0.651961, 1.527255, 0.65871},
		{0.583922, 0.603922, 1.033922, 0.7630},
		{0.576471, 0.529412, 0.706667, 0.8107},
		{0.309804, 0.409804, 0.549020, 0.88971},
	};

	template<typename T, unsigned I>
	static constexpr unsigned arraySize(const T(&)[I]) {
		return I;
	}

	static Vec3f evalGradient(float t, nytl::Span<const Vec4f> vals) {
		t = std::clamp(t, 0.f, 1.f);
		for(uint i = 1u; i < vals.size(); ++i) {
			Vec4f color = vals[i];
			if(t < color[3]) {
				Vec4f prev = vals[i - 1];
				float fac = nytl::smoothstep(prev[3], color[3], t);
				return mix(Vec3f(prev), Vec3f(color), fac);
			}
		}

		float fac = nytl::smoothstep(vals.back()[3], 1 + vals.front()[3], t);
		return mix(Vec3f(vals.back()), Vec3f(vals.front()), fac);
	}

	static Vec3f computeSunColor(float t) {
		return evalGradient(t, sunColors);
	}

	static Vec3f computeAmbientColor(float t) {
		return evalGradient(t, ambientColors);
	}
};
