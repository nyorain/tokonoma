#version 460

#extension GL_GOOGLE_include_directive : require
#include "precoscat.hpp"

layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(set = 0, binding = 0) uniform AtmosphereUBO {
	mat4 _;
	Atmosphere atmosphere;
};
layout(set = 0, binding = 1) writeonly uniform image2D outTrans;

void main() {
	uvec2 size = imageSize(outTrans);
	uvec2 pixel = gl_GlobalInvocationID.xy;
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	// Make sure pixel at position 0 contains the value 0.0 and
	// the last pixel (position size - 1) contains value 1.0.
	// NOTE: this is basically what bruneton does via the
	// GetUnitRangeFromTextureCoord, except that they don't use compute
	// shaders/storage images. We can explicitly access pixels in a saner
	// way here instead of re-normalizing the position coming from
	// gl_FragCoord.
	vec2 unitRange = pixel / (size - 1.f);
	ARay ray = rayFromTransTexUnit(atmosphere, unitRange);
	vec3 trans = transmittanceToTop(atmosphere, ray);

	imageStore(outTrans, ivec2(pixel), vec4(trans, 1.0));
}
