#version 450

// TODO: try out concepts/blur.comp: using compute shader shared memory
// wip, only if we do above is this shader really worth it... 

layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D outColor;
layout(set = 0, binding = 1) uniform sampler2D colorTex;
layout(set = 0, binding = 2) uniform sampler2D ssrTex;
layout(set = 0, binding = 3) uniform sampler2D depthTex;

void main() {
	uvec2 pixel = gl_GlobalInvocationID.xy;
	uvec2 size = imageSize(outColor);
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	vec2 pixelSize = 1.f / size;
	vec2 uv = (pixel + vec2(0.5, 0.5)) * pixelSize;

	vec4 ssr = textureLod(ssrTex, uv, 0);
	if(ssr.xy == vec2(0.0)) { // nothing to do
		return;
	}

	float fac = ssr.w;
	int blurRange = int(clamp(5.0 * refl.z, 0.0, 5.0));
	vec3 color;

	imageStore(outColor, ivec2(pixel), vec4(color, 1.0));
}
