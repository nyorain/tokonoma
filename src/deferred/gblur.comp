#version 450

// two-step gaussian blur

layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(set = 0, binding = 0) uniform sampler2D inCol;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D outCol;

layout(push_constant) uniform Params {
	// encodes the offsets and weights needed for linear sampling
	// as described here: 
	// http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
	// the x component is the offset
	// the y component is the weight
	// Sicne offsetWeights[0].x is always 0.0, uses it to encode extra info:
	// - if it's > 0 it's an horizontal blur, otherwise vertical
	// - its absolute value is the blur size, i.e. how many members
	//   of offsetWeights are valid. Always in [1, 16]
	vec2 offsetWeights[16];
};

void main() {
	uvec2 pixel = gl_GlobalInvocationID.xy;
	uvec2 size = imageSize(outCol);
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	// +0.5 offset for pixel important to make blur centered
	// pixel centers is at 0.5
	vec2 pixelSize = 1.f / size;
	vec2 uv = (pixel + vec2(0.5, 0.5)) * pixelSize;
	vec2 owo = offsetWeights[0];
	vec3 blurred = texture(inCol, uv).rgb * owo.y;

	uint count = uint(abs(owo.x));
	float horizontal = float(owo.x > 0);
	vec2 off = pixelSize * vec2(horizontal, 1 - horizontal);
	for(uint i = 1u; i < count; ++i) {
		vec2 ow = offsetWeights[i];
		blurred += texture(inCol, uv + ow.x * off).rgb * ow.y;
		blurred += texture(inCol, uv - ow.x * off).rgb * ow.y;
	}

	imageStore(outCol, ivec2(pixel), vec4(blurred, 0.0));
}

