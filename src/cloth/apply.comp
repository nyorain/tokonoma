#version 460

layout(set = 0, binding = 0) uniform UBO {
	uint gridSize;
	float dt;
} params;

struct Node {
	vec3 pos;
	vec3 vel;
	vec3 npos; // for integration only
};

layout(set = 0, binding = 1) buffer Nodes {
	Node nodes[];
};

void main() {
	uvec2 id = gl_GlobalInvocationID.xy;
	if(id.x >= params.gridSize || id.y > params.gridSize) {
		return;
	}

	uint nid = id.y * params.gridSize + id.x;
	Node node = nodes[nid];

	vec3 tmp = node.pos;
	node.pos = node.npos;
	node.npos = tmp;
	node.vel = (node.npos - node.pos) / params.dt;

	nodes[nid] = node;
}

