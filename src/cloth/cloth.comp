#version 460

const uint fixCorner0 = (1u << 0u);
const uint fixCorner1 = (1u << 1u);
const uint fixCorner2 = (1u << 2u);
const uint fixCorner3 = (1u << 3u);

const float l = 1.f;
const float ldiag = sqrt(2) * l;

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 0, binding = 0) uniform UBO {
	uint gridSize;
	float dt;
	float ks0;
	float ks1;
	float ks2;
	float kd0;
	float kd1;
	float kd2;
	float mass;
	uint fixedCorners;
} params;

struct Node {
	vec4 pos;
	vec4 vel;
};

layout(set = 0, binding = 1) buffer InNodes {
	readonly Node nodes[];
};

layout(set = 0, binding = 2) buffer OutNodes {
	writeonly Node outNodes[];
};

vec3 springForce(vec3 pd, vec3 vd, float ks, float kd, float l) {
	float pdl = length(pd);
	pd /= pdl;
	return pd * (ks * (pdl - l) + kd * dot(vd, pd));
}

vec3 force(Node node, ivec2 dst, float ks, float kd, float l) {
	if(clamp(dst, 0, params.gridSize - 1) != dst) {
		return vec3(0.0);
	}

	Node dnode = nodes[dst.y * params.gridSize + dst.x];
	vec3 pd = (dnode.pos - node.pos).xyz;
	vec3 vd = (dnode.vel - node.vel).xyz;
	return springForce(pd, vd, ks, kd, l);
}

vec3 totalForce(Node node, ivec2 id) {
	// start with external forces: gravity
	vec3 f = vec3(0.0, -10.0 * params.mass, 0.0);

	// 1
	f += force(node, id + ivec2(0, 1), params.ks0, params.kd0, l);
	f += force(node, id + ivec2(0, -1), params.ks0, params.kd0, l);
	f += force(node, id + ivec2(1, 0), params.ks0, params.kd0, l);
	f += force(node, id + ivec2(-1, 0), params.ks0, params.kd0, l);

	// 2
	f += force(node, id + ivec2(0, 2), params.ks1, params.kd1, 2 * l);
	f += force(node, id + ivec2(0, -2), params.ks1, params.kd1, 2 * l);
	f += force(node, id + ivec2(2, 0), params.ks1, params.kd1, 2 * l);
	f += force(node, id + ivec2(-2, 0), params.ks1, params.kd1, 2 * l);

	// 3
	f += force(node, id + ivec2(1, 1), params.ks2, params.kd2, ldiag);
	f += force(node, id + ivec2(1, -1), params.ks2, params.kd2, ldiag);
	f += force(node, id + ivec2(-1, 1), params.ks2, params.kd2, ldiag);
	f += force(node, id + ivec2(-1, -1), params.ks2, params.kd2, ldiag);
	return f;
}

void main() {
	ivec2 id = ivec2(gl_GlobalInvocationID.xy);
	if(id.x >= params.gridSize || id.y >= params.gridSize) {
		return;
	}

	uint nid = id.y * params.gridSize + id.x;
	Node node = nodes[nid];

	uint s = params.gridSize - 1;
	if(id == ivec2(0, 0) && bool(params.fixedCorners & fixCorner0) ||
			id == ivec2(s, 0) && bool(params.fixedCorners & fixCorner1) ||
			id == ivec2(0, s) && bool(params.fixedCorners & fixCorner2) ||
			id == ivec2(s, s) && bool(params.fixedCorners & fixCorner3)) {
		outNodes[nid] = node;
		return;
	}

	float dt = params.dt;
	vec3 a = totalForce(node, id) / params.mass;
	node.pos.xyz = node.pos.xyz + dt * node.vel.xyz + 0.5 * dt * dt * a;
	node.vel.xyz = node.vel.xyz + dt * a;
	outNodes[nid] = node;
}
