#version 450

struct Particle {
	vec2 pos;
	vec2 vel;
};

layout(local_size_x = 64) in;
layout(std430, set = 0, binding = 0) buffer Particles {
	Particle particles[];
};

layout(set = 0, binding = 1) uniform UBO {
	// vec4 for alignment
	// xy is one attraction, zw is one
	// so we really have 8 possible attractions
	vec4 attract[4]; // attraction positions

	// physically correct: only the third component is set (to a value
	// depending on the mass). But it looks nicer if we add normalized
	// (first component) and inv-linear (second component) in addition
	// to the inv-squared (third component) distance as well.
	// Alpha component is friction
	vec4 attractionFactors;

	float maxVel;
	float distOff;

	float deltaT; // time delta in seconds
	uint count; // number of attraction positions (<= 10)
	float time;

	// range in x is always [-1, 1], this provides the range in
	// y range. Needed to account for aspect ratio 
	float ysize;
} ubo;


// For normal particle simulation, just ignore this.
// Allows to use particles as audio visualizer
#ifdef WITH_FACTORS
layout(std430, set = 0, binding = 2) readonly buffer Factors {
	float factors[];
};
#endif // WITH_FACTORS

vec2 attraction(vec2 pos, vec2 attractPos) {
	vec2 delta = attractPos - pos;
	float invDist = 1.0f / (ubo.distOff + length(delta));
	float id1 = invDist;
	float id2 = invDist * id1;
	float id3 = invDist * id2;
	return delta * dot(ubo.attractionFactors.xyz, vec3(id1, id2, id3));
}

// y dimension: bounce-back
void topBorder(inout vec2 pos, inout vec2 vel) {
	pos.y = -2.f * ubo.ysize - pos.y;
	vel.y = -vel.y;
}

void bottomBorder(inout vec2 pos, inout vec2 vel) {
	pos.y = 2.f * ubo.ysize - pos.y;
	vel.y = -vel.y;
}

// x-dimension: wrap around
// NOTE: we could duplicate all attractors at least once to the
// left and right to simulate real world wrapping. When attractor is left
// but particle on the right it should (logically, for a really wrapped world)
// be attracted to the right more than the left.
void rightBorder(inout vec2 pos, inout vec2 vel) {
	pos.x = -2.f + pos.x;
}

void leftBorder(inout vec2 pos, inout vec2 vel) {
	pos.x = 2.f + pos.x;
}

void main() {
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	if(index >= particles.length()) {
		return;
	}

	// Read position and velocity
	vec2 pos = particles[index].pos;
	vec2 vel = particles[index].vel;

	// apply friction
	float mass = 1.f;
#ifdef WITH_FACTORS
	// 1: trivial
	// simply associate a frequency with each particle, constant
	// mass *= factors[index % factors.length()];

	// 2: dynamically associate frequency based on distance from
	// first attactor
	if(ubo.count > 0) {
		float dist = distance(pos, ubo.attract[0].xy);
		int id = int((factors.length() / sqrt(8)) * dist);
		// mass = factors[(factors.length() - 1 - id) % factors.length()];
		mass *= factors[id % factors.length()];
	}
	
	// 2b: based on velocity
	// if(ubo.count > 0) {
	// 	float dist = length(vel);
	// 	int id = int((factors.length() / sqrt(8)) * dist);
	// 	// mass = factors[(factors.length() - 1 - id) % factors.length()];
	// 	mass *= factors[id % factors.length()];
	// }
	
	// 3: associate frequency based on angle from first attractor
	// if(ubo.count > 0) {
	// 	const float pi = 3.1415; // good enough
	// 	vec2 diff = pos - ubo.attract[0].xy;
	// 	float angle = atan(diff.y, diff.x);
	// 	int id = int((angle + pi) / (2 * pi) * factors.length());
	// 	mass = factors[id % factors.length()];
	// }

	// 4: like 3 but symmetric and interpolated
	// if(ubo.count > 0) {
	// 	const float pi = 3.1415; // good enough
	// 	vec2 diff = pos - ubo.attract[0].xy;
	// 	float angle = atan(diff.y, diff.x) + 0.1 * ubo.time;
	// 	float id = (angle + pi) / (1 * pi) * factors.length();
	// 	mass *= factors[int(id) % factors.length()];
	// 	// intepolate
	// 	// float fac = fract(id);
	// 	// mass = mix(
	// 	// 	factors[int(floor(id)) % factors.length()],
	// 	// 	factors[int(ceil(id)) % factors.length()], fac);
	// }

	// 5: based on velocity angle
	// if(ubo.count > 0) {
	// 	const float pi = 3.1415; // good enough
	// 	float angle = atan(vel.y, vel.x) + 0.1 * ubo.time;
	// 	float id = (angle + pi) / (1 * pi) * factors.length();
	// 	mass *= factors[int(id) % factors.length()];
	// }
#endif // WITH_FACTORS

	// vec2 acc = -(1 - pow(ubo.attractionFactors.a, ubo.deltaT)) * vel;
	// vel += acc / (1 + mass);
	vel *= pow(ubo.attractionFactors.a, ubo.deltaT / sqrt(mass));

	// Calculate new velocity depending on attraction point
	// float fac = 1.f / sqrt(ubo.count);
	vec2 acc = vec2(0.0);
	for(uint i = 0; i < ubo.count; ++i) {
		vec2 a = mod(i, 2) == 0 ? ubo.attract[i / 2].xy : ubo.attract[i / 2].zw;
		acc += attraction(pos, a);
	}

	vel += ubo.deltaT * acc * mass;
	float l = length(vel);
	if(l > ubo.maxVel) {
		vel *= ubo.maxVel / l;
	}

	// Move by velocity
	pos += vel * ubo.deltaT;

	// border
	if(pos.x < -1.0) {
		leftBorder(pos, vel);
	} else if(pos.x > 1.0) {
		rightBorder(pos, vel);
	}

	if(pos.y < -ubo.ysize) {
		topBorder(pos, vel);
	} else if(pos.y > ubo.ysize) {
		bottomBorder(pos, vel);
	}

	// Write back
	particles[index].pos = pos;
	particles[index].vel = vel;
}
