#version 450

#extension GL_GOOGLE_include_directive : enable
#include "scene.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

const uint modePassthrough = 0u;
const uint modeClipColor = 1u;
const uint modeReprDepthRej = 2u;
const uint modeCombined = 3u;
const uint debugModeVelocity = 4u;
const uint modePass = 5u;

// alpha value of history is the linear depth
layout(set = 0, binding = 0) uniform sampler2D inHistory;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D outHistory;
layout(set = 0, binding = 2) uniform sampler2D renderedTex;
layout(set = 0, binding = 3) uniform sampler2D depthTex; // non-linear, [0, 1]
layout(set = 0, binding = 4) uniform sampler2D velocityTex;

layout(set = 0, binding = 5, row_major) uniform UBO {
	mat4 invProj;
	mat4 lastProj;
	mat4 proj;
	mat4 invLastProj;
	vec2 jitter;
	vec2 lastJitter;
	float near, far;
	float minFac;
	float maxFac;
	uint mode;
} ubo;

uvec2 size = imageSize(outHistory);
vec2 pixelSize = 1.f / size;

// Luninance vector. dot(light.rgb, luminance) will be used to
// calculate the luminance. Must rerecord when changed.
// See https://stackoverflow.com/questions/596216 for a discussion
// about different conventions.
const vec3 luminanceFac = vec3(0.25, 0.65, 0.1);

vec3 T(vec3 col) {
	// return col / (1 + dot(luminanceFac, col));
	return col;
}

vec3 iT(vec3 col) {
	// return col / (1 - dot(luminanceFac, col));
	return col;
}

vec3 find_closest_fragment_3x3(vec2 uv) {
	vec2 dd = pixelSize;
	vec2 du = vec2(dd.x, 0.0);
	vec2 dv = vec2(0.0, dd.y);

	// TODO: use textureOffset
	vec3 dtl = vec3(-1, -1, texture(depthTex, uv - dv - du).x);
	vec3 dtc = vec3( 0, -1, texture(depthTex, uv - dv).x);
	vec3 dtr = vec3( 1, -1, texture(depthTex, uv - dv + du).x);

	vec3 dml = vec3(-1, 0, texture(depthTex, uv - du).x);
	vec3 dmc = vec3( 0, 0, texture(depthTex, uv).x);
	vec3 dmr = vec3( 1, 0, texture(depthTex, uv + du).x);

	vec3 dbl = vec3(-1, 1, texture(depthTex, uv + dv - du).x);
	vec3 dbc = vec3( 0, 1, texture(depthTex, uv + dv).x);
	vec3 dbr = vec3( 1, 1, texture(depthTex, uv + dv + du).x);

	vec3 dmin = dtl;
#define ZCMP_GT(a, b) (a > b)
	if (ZCMP_GT(dmin.z, dtc.z)) dmin = dtc;
	if (ZCMP_GT(dmin.z, dtr.z)) dmin = dtr;

	if (ZCMP_GT(dmin.z, dml.z)) dmin = dml;
	if (ZCMP_GT(dmin.z, dmc.z)) dmin = dmc;
	if (ZCMP_GT(dmin.z, dmr.z)) dmin = dmr;

	if (ZCMP_GT(dmin.z, dbl.z)) dmin = dbl;
	if (ZCMP_GT(dmin.z, dbc.z)) dmin = dbc;
	if (ZCMP_GT(dmin.z, dbr.z)) dmin = dbr;

	return vec3(uv + dd.xy * dmin.xy, dmin.z);
#undef ZCMP_GT
}

vec3 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec3 p, vec3 q) {
	vec3 r = q - p;
	vec3 rmax = aabb_max - p.xyz;
	vec3 rmin = aabb_min - p.xyz;

	const float eps = 0.00000001f;

	if (r.x > rmax.x + eps)
		r *= (rmax.x / r.x);
	if (r.y > rmax.y + eps)
		r *= (rmax.y / r.y);
	if (r.z > rmax.z + eps)
		r *= (rmax.z / r.z);

	if (r.x < rmin.x - eps)
		r *= (rmin.x / r.x);
	if (r.y < rmin.y - eps)
		r *= (rmin.y / r.y);
	if (r.z < rmin.z - eps)
		r *= (rmin.z / r.z);

	return p + r;
}

// inverse reproject depth rejection
// returns the correctenss
// float irdr(vec2 uv, vec2 juv, float projZ, float histZ) {
float irdr(vec2 uv, float velZ, float projZ, float histZ) {
	const ivec2 offx = ivec2(1, 0);
	const ivec2 offy = ivec2(0, 1);

	// TODO: not sure whether to sample velocity for each as well
#define RZ(_o) \
	depthtoz(textureOffset(depthTex, uv, _o).r, ubo.near, ubo.far) - velZ
	// depthtoz(textureOffset(depthTex, uv, _o).r, ubo.near, ubo.far) \
	// 	- textureOffset(velocityTex, uv, _o).z

	float z0 = RZ(+offx);
	float z1 = RZ(-offx);
	float z2 = RZ(+offy);
	float z3 = RZ(-offy);
	float zmin = min(projZ, min(z0, min(z1, min(z2, z3))));
	float zmax = max(projZ, max(z0, max(z1, max(z2, z3))));

	z0 = RZ(+offx + offy);
	z1 = RZ(+offx - offy);
	z2 = RZ(-offx + offy);
	z3 = RZ(-offx - offy);
	zmin = min(zmin, min(z0, min(z1, min(z2, z3))));
	zmax = max(zmax, max(z0, max(z1, max(z2, z3))));

#undef RZ

	// float thl = 0.01 * (projZ - zmin);
	// float thh = 0.01 * (zmax - projZ);
	float thl = 0.05;
	float thh = 0.05;

	// IDEA: we could also apply the color clamping as fallback here
	// when we reject the depth (linearly interpolate between results).
	// see previous commits, already implemented it.
	// float correctness = smoothstep(zmin - 2 * thl, zmin - thl, histZ) *
	// 	(1 - smoothstep(zmax + thh, zmax + 2 * thh, histZ));
	float correctness = smoothstep(zmin - thl, zmin, histZ) *
		(1 - smoothstep(zmax, zmax + thh, histZ));
	// float correctness = step(zmin, histZ) * (1 - step(zmax, histZ));

	return correctness;
}

vec3 min(vec3 a, vec3 b, vec3 c, vec3 d) {
	return min(a, min(b, min(c, d)));
}

vec3 max(vec3 a, vec3 b, vec3 c, vec3 d) {
	return max(a, max(b, max(c, d)));
}

vec3 colorClip2(vec2 juv, vec3 color, vec3 hist, out float contrast) {
	const ivec2 dx = ivec2(1, 0);
	const ivec2 dy = ivec2(0, 1);

	vec3 c00 = T(textureOffset(renderedTex, juv, -dy - dx).rgb);
	vec3 c01 = T(textureOffset(renderedTex, juv, -dy).rgb);
	vec3 c02 = T(textureOffset(renderedTex, juv, -dy + dx).rgb);
	vec3 c10 = T(textureOffset(renderedTex, juv, -dx).rgb);
	// vec3 c11 = textureOffset(renderedTex, juv, ivec2(0, 0)).rgb;
	vec3 c12 = T(textureOffset(renderedTex, juv, dx).rgb);
	vec3 c20 = T(textureOffset(renderedTex, juv, dy - dx).rgb);
	vec3 c21 = T(textureOffset(renderedTex, juv, dy).rgb);
	vec3 c22 = T(textureOffset(renderedTex, juv, dy + dx).rgb);

	vec3 cmin = min(c00, c01, c02, min(c10, c12, color, min(c20, c21, c22, color)));
	vec3 cmax = max(c00, c01, c02, max(c10, c12, color, max(c20, c21, c22, color)));
	vec3 cavg = (c00 + c01 + c02 + c10 + c12 + color + c20 + c21 + c22) / 9.0;

	// rounded
	vec3 cmin5 = min(c01, c10, c12, min(color, c21));
	vec3 cmax5 = max(c01, c10, c12, max(color, c21));
	vec3 cavg5 = (c01 + c10 + c12 + c21 + color) / 5.0;
	cmin = 0.5 * (cmin + cmin5);
	cmax = 0.5 * (cmax + cmax5);
	cavg = 0.5 * (cavg + cavg5);

	contrast = length(cmax - cmin);

	hist.rgb = clip_aabb(cmin, cmax, cavg, hist.rgb);
	return hist.rgb;
}

vec3 colorClip(vec2 juv, vec3 color, vec3 hist, float lvel) {
	// const vec2 off11 = exp(-100 * lvel) * vec2(1, 1) / textureSize(renderedTex, 0);
	// const vec2 off01 = exp(-100 * lvel) * vec2(-1, 1) / textureSize(renderedTex, 0);
	// const vec2 off11 = exp(-1 * lvel) * vec2(1, 1) / textureSize(renderedTex, 0);
	// const vec2 off01 = exp(-1 * lvel) * vec2(-1, 1) / textureSize(renderedTex, 0);
	const vec2 off11 = vec2(1, 1) / textureSize(renderedTex, 0);
	const vec2 off01 = vec2(-1, 1) / textureSize(renderedTex, 0);
	// const ivec2 off01 = vec2(1, 0);
	// const ivec2 off10 = vec2(0, 1);

	vec3 c00 = texture(renderedTex, juv -off11).rgb;
	vec3 c10 = texture(renderedTex, juv -off01).rgb;
	vec3 c01 = texture(renderedTex, juv +off01).rgb;
	vec3 c11 = texture(renderedTex, juv +off11).rgb;

	vec3 cmin = min(color, min(c00, min(c10, min(c01, c11))));
	vec3 cmax = max(color, max(c00, max(c10, max(c01, c11))));
	// vec3 cmin = min(color, min(c00, min(c10, min(c01, min(c11, min(c2, c3))))));
	// vec3 cmax = max(color, max(c00, max(c10, max(c01, max(c11, max(c2, c3))))));
	// vec3 cavg = 0.25 * (c00 + c10 + c01 + c11);
	// vec3 cavg = (color + c00 + c10 + c01 + c11 + c2 + c3) / 7;
	vec3 cavg = (color + c00 + c10 + c01 + c11) / 5;

	// hist.rgb = clamp(hist.rgb, cmin, cmax);
	hist.rgb = clip_aabb(cmin, cmax, cavg, hist.rgb);
	return hist.rgb;
}

void main() {
	// get pixel this invocation is responsible for
	// out of bounds can happen when image size isn't multiple of
	// work group size
	uvec2 pixel = gl_GlobalInvocationID.xy;
	if(pixel.x >= size.x || pixel.y >= size.y) {
		return;
	}

	// reconstruct world space using the depth buffer
	vec2 uv = (pixel + 0.5) * pixelSize; // center of pixel

	// if disabled
	if(ubo.mode == modePassthrough) {
		vec3 color = texture(renderedTex, uv).rgb;
		imageStore(outHistory, ivec2(pixel), vec4(color, -1.f));
		return;
	} else if(ubo.mode == debugModeVelocity) {
		vec3 vel = texture(velocityTex, uv).rgb;
		imageStore(outHistory, ivec2(pixel), vec4(abs(10 * vel.xyz), -1.f));
		return;
	}

	// read rendered pixel 
	// vec2 j = 0.5 * ubo.jitter;
	// j.y *= -1;
	// vec2 juv = uv + j;
	float depth = texture(depthTex, uv).r;
	float z = depthtoz(depth, ubo.near, ubo.far);

	vec2 vuv = find_closest_fragment_3x3(uv).xy;
	vec3 vel = texture(velocityTex, vuv).xyz;
	// vec3 vel = texture(velocityTex, uv).xyz;
	vel.xy += 0.5f * (ubo.lastJitter - ubo.jitter);
	vel.y *= -1.f;

	// vec3 world = reconstructWorldPos(uv, ubo.invProj, depth);
	vec3 color = T(texture(renderedTex, uv).rgb);
	// vec3 color = world;

	// vec3 proj = multPos(ubo.lastProj, world);
	// vec2 tc = 0.5 + 0.5 * vec2(proj.x, -proj.y);
	// vec3 tc = vec3(juv, z) - vel;
	vec3 tc = vec3(uv, z) - vel;
	// check if history is still in screen
	if(tc.xy == clamp(tc.xy, 0, 1)) { // also skip for depth == 1.0?
		vec4 hist = texture(inHistory, tc.xy);
		hist = vec4(T(hist.rgb), hist.a);

		float weight = 0.0;
		if(ubo.mode == modeClipColor) {
			// hist.rgb = colorClip(uv, color, hist.rgb, length(vel));
			float contrast;
			vec3 clipped = colorClip2(uv, color, hist.rgb, contrast);
			// weight = 1.f;
			// if clipped and hist are almost equal (i.e. no or not
			// much clipping happened) use a higher factor
			hist.rgb = clipped;
			// weight = irdr(uv, vel.z, tc.z, hist.w);
			z = -1.f;
			// float npz = hist.w + vel.z;
			// z = mix(z, npz, weight);

			// the larger the difference between the old and new luminance
			// values, the more we trust the new value
			float lum0 = dot(luminanceFac, color);
			float lum1 = dot(luminanceFac, hist.rgb);
			float diff = abs(lum0 - lum1) / (max(lum0, max(lum1, 0.2)));
			diff = 1.0 - diff;
			// float fac1 = exp(-5 * length(clipped - hist.rgb));

			// weight = mix(ubo.minFac, ubo.maxFac, (diff * diff + fac1) / 2);
			weight = mix(ubo.minFac, ubo.maxFac, diff * diff);
			// float fac2 = 1 - exp(-1 * contrast);
			// weight = mix(ubo.minFac, ubo.maxFac, (diff * diff + fac1 + fac2) / 3);
			/*
		} else if(ubo.mode == modeReprDepthRej) {
			weight = irdr(uv, vel.z, tc.z, hist.w);
			// if(weight < 0.1) {
			// color = vec3(0.5 * hist.w, 0, 1);
			// }

			// reproejct old linear depth to new projection
			// PERF: can probably be optimized as we only need depth
			// vec3 ndc = vec3(proj.xy, ztodepth(hist.w, ubo.near, ubo.far));
			// vec3 world = multPos(ubo.invLastProj, ndc);
			// float npz = depthtoz(multPos(ubo.proj, world).z, ubo.near, ubo.far);
			float npz = hist.w + vel.z;
			z = mix(z, npz, weight * ubo.maxFac);

			float lum0 = dot(luminanceFac, color);
			float lum1 = dot(luminanceFac, hist.rgb);
			float diff = abs(lum0 - lum1) / (max(lum0, max(lum1, 0.1)));
			diff = 1.0 - diff;
			weight *= mix(ubo.minFac, ubo.maxFac, diff * diff);
		} else if(ubo.mode == modeCombined) {
			float dweight = irdr(uv, vel.z, tc.z, hist.w);
			vec3 dcol = colorClip(uv, color, hist.rgb, length(vel));

			// debugging
			// if(dweight < 0.5) {
				// color = vec3(0, 1, 1);
			// }
			// dcol = vec3(1, 0, 1);

			// when moving more than x pixels, fully use color clipping
			float lerpMax = 8.0;
			// TODO: not sure about using vel.z here as well...
			// the factor is rather random as well
			// vec3 pvel = vec3(vel.xy * size, vel.z * 0.01);
			vec2 pvel = vel.xy * size;
			float fac = smoothstep(0.0, lerpMax, length(pvel));

			// maybe better in other color space?
			// float fac = 0.0;
			// if(length(dcol - hist.rgb) > 0.1) {
				// fac = 1.0;	
			// }

			hist.rgb = mix(hist.rgb, dcol, fac);
			// weight = mix(dweight, 1.f, fac);
			weight = dweight;

			// reproejct old linear depth to new projection
			// PERF: can probably be optimized as we only need depth
			// vec3 ndc = vec3(proj.xy, ztodepth(hist.w, ubo.near, ubo.far));
			// vec3 world = multPos(ubo.invLastProj, ndc);
			// float npz = depthtoz(multPos(ubo.proj, world).z, ubo.near, ubo.far);
			float npz = hist.w + vel.z;
			z = mix(z, npz, weight * ubo.maxFac);
		} else if(ubo.mode == modePass) {
			weight = 1.f;
			*/
		}

		// float lum0 = dot(luminanceFac, color);
		// float lum1 = dot(luminanceFac, hist.rgb);
		// float diff = abs(lum0 - lum1) / (max(lum0, max(lum1, 0.2)));
		// diff = 1.0 - diff;
		// weight *= mix(diff * diff, ubo.minFac, ubo.maxFac);
		// weight *= mix(weight, ubo.minFac, ubo.maxFac);
		// weight *= ubo.maxFac;

		// weight *= 1 - 0.05 * distance(hist.rgb, color);
		// float weight = 1 - 0.1 * distance(hist.rgb, color);

		// color = mix(color, hist.rgb, weight);

		// the more movement, the more we trust the current value
		// this helps to fight blurriness but obviously decreases
		// AA quality for quick movement
		weight *= exp(-10 * max(length(vel) - 2 * length(pixelSize), 0.0));
		color = mix(color, hist.rgb, weight);
	} 

	// debugging was fun.
	// TODO: there still seems to be a nan case in the pbr pipeline...
	// debug and fix it! then this can be removed
	if(any(isnan(color))) {
		color = vec3(0.0, 5.0, 0.0);
	}

	// write the result into the history buffer
	imageStore(outHistory, ivec2(pixel), vec4(iT(color), z));
}
